@page "/register"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Frontend.Models

@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager Navigation
@inject ILogger<RegistrationScreen> Logger

@rendermode InteractiveServer

<h3>Registration</h3>

<EditForm Model="@registrationModel" FormName="RegistrationForm" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
        <ValidationMessage For="() => registrationModel.Email" />
    </div>

    <div class="mb-3">
        <label for="username">UserName</label>
        <InputText id="username" class="form-control" @bind-Value="registrationModel.UserName" />
        <ValidationMessage For="() => registrationModel.UserName" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" />
        <ValidationMessage For="() => registrationModel.Password" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registrationModel.ConfirmPassword" />
        <ValidationMessage For="() => registrationModel.ConfirmPassword" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>

</EditForm>

@code {
    [SupplyParameterFromForm]
    public RegistrationModel? registrationModel { get; set; }

    protected override void OnInitialized()
    {
        registrationModel ??= new();
    }

    private async Task HandleRegistration()
    {
        try
        {
            Logger.LogInformation("Registration attempt");

            var user = new IdentityUser { UserName = registrationModel.UserName, Email = registrationModel.Email };
            var result = await UserManager.CreateAsync(user, registrationModel.Password);

            if (result.Succeeded)
            {
                Logger.LogInformation("Registration successful");
                // await SignInManager.SignInAsync(user, isPersistent: false);
                Navigation.NavigateTo("/");
            }
            else
            {
                Logger.LogInformation("Registration failed");
            }
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "exception occured");
        }

    }
}
