@using Frontend.Components.Shared;
@using Frontend.Services;
@using Extensions
@using Frontend.Models;

@page "/licitation-screen"

@inject NavigationManager Navigation
@inject IDistributedCache cache;

@rendermode InteractiveServer

<div class="licitation">
	<div class="licitation-container">
		<div class="licitation-screen">
			<div class="players">
				<div class="player">
					<p>W</p>
				</div>
				<div class="player">
					<p>N</p>
				</div>
				<div class="player">
					<p>E</p>
				</div>
				<div class="player player4">
					<p>S</p>
				</div>
			</div>
			<div class="bids">
				@for (int i = 0; i < GetPlayerWhoStartsAsNumber(); i++)
				{
					<div></div>
				}
				@foreach (var bid in biddingState.Bids) {
					<div class="bidded">
						<p>@bid.Key @bid.Value</p>
					</div>
				}
			</div>
		</div>
		<div class="bidding-panel">
			<div class="panel-box-1">
				<div class="pass">
					<button @onclick="HandlePassButtonClick">Pass</button>
				</div>
				<div class="x-and-xx">
					<button class="@(CanDouble() ? "" : "hidden")" @onclick="HandleXButtonClick">X</button>
					<button class="@(CanRedouble() ? "" : "hidden")" @onclick="HandleXXButtonClick">XX</button>
				</div>
			</div>
			<div class="panel-box-2">
				<div class="clubs">
					@for (int i = 1; i <= 7; i++)
					{
						int currentNumber = i;
						string suit = "club";
						<BiddingButton Class="@(currentNumber < biddingState.LowestClub ? "hidden" : "")" OnClick="() => HandleSuitButtonClick(currentNumber, suit)" Number=currentNumber Icon="♣" />
					}
				</div>
				<div class="diamonds">
					@for (int i = 1; i <= 7; i++)
					{
						int currentNumber = i;
						string suit = "diamond";
						<BiddingButton Class="@(currentNumber < biddingState.LowestDiamond ? "hidden" : "")" OnClick="() => HandleSuitButtonClick(currentNumber, suit)" Number=currentNumber Icon="♦" />
					}
				</div>
				<div class="hearts">
					@for (int i = 1; i <= 7; i++)
					{
						int currentNumber = i;
						string suit = "heart";
						<BiddingButton Class="@(currentNumber < biddingState.LowestHeart ? "hidden" : "")" OnClick="() => HandleSuitButtonClick(currentNumber, suit)" Number=currentNumber Icon="♥" />
					}
				</div>
				<div class="spades">
					@for (int i = 1; i <= 7; i++)
					{
						int currentNumber = i;
						string suit = "spade";
						<BiddingButton Class="@(currentNumber < biddingState.LowestSpade ? "hidden" : "")" OnClick="() => HandleSuitButtonClick(currentNumber, suit)" Number=currentNumber Icon="♠" />
					}
				</div>
				<div class="no-trumps">
					@for (int i = 1; i <= 7; i++)
					{
						int currentNumber = i;
						string suit = "noTrump";
						<BiddingButton Class="@(currentNumber < biddingState.LowestNoTrump ? "hidden" : "")" OnClick="() => HandleSuitButtonClick(currentNumber, suit)" Number=currentNumber Icon="NT" />
					}
				</div>
			</div>
		</div>
	</div>
</div>


@code {

	private BiddingState biddingState = new BiddingState();

	private void HandleSuitButtonClick(int i, string suit)
	{
		switch (suit)
		{
			case "noTrump":
				biddingState.LowestNoTrump = i + 1;
				biddingState.LowestSpade = i + 1;
				biddingState.LowestHeart = i + 1;
				biddingState.LowestDiamond = i + 1;
				biddingState.LowestClub = i + 1;
 				break;
 			case "spade":
 				biddingState.LowestNoTrump = i;
 				biddingState.LowestSpade = i + 1;
 				biddingState.LowestHeart = i + 1;
 				biddingState.LowestDiamond = i + 1;
 				biddingState.LowestClub = i + 1;
 				break;
 			case "heart":
				biddingState.LowestNoTrump = i;
				biddingState.LowestSpade = i;
				biddingState.LowestHeart = i + 1;
				biddingState.LowestDiamond = i + 1;
				biddingState.LowestClub = i + 1;
 				break;
 			case "diamond":
				biddingState.LowestNoTrump = i;
				biddingState.LowestSpade = i;
				biddingState.LowestHeart = i;
				biddingState.LowestDiamond = i + 1;
				biddingState.LowestClub = i + 1;
 				break;
 			case "club":
				biddingState.LowestNoTrump = i;
				biddingState.LowestSpade = i;
				biddingState.LowestHeart = i;
				biddingState.LowestDiamond = i;
				biddingState.LowestClub = i + 1;
 				break;
		}

		biddingState.Bids.Add(new KeyValuePair<int?, string>(i, GetSuitIcon(suit)));

		biddingState.CurrentWinningBid = (i, suit);
		biddingState.IsDoubled = false;
		biddingState.IsRedoubled = false;

		biddingState.WhoPlacedLastBid = biddingState.CurrentPlayer;

		biddingState.IsUndoubledBidPlaced = true;

		ChangeCurrentPlayer();
	}

	private void HandlePassButtonClick() {
		biddingState.Bids.Add(new KeyValuePair<int?, string>(null, "PASS"));

		if (CheckIfThreePasses())
		{
			Console.WriteLine(biddingState.CurrentWinningBid);
			Console.WriteLine(biddingState.IsDoubled);
			Console.WriteLine(biddingState.IsRedoubled);
			Navigation.NavigateTo("/");
		}

		ChangeCurrentPlayer();
	}

	private void HandleXButtonClick() {
		biddingState.Bids.Add(new KeyValuePair<int?, string>(null, "X"));
		biddingState.IsDoubled = true;
		biddingState.IsUndoubledBidPlaced = false;
		ChangeCurrentPlayer();
	}

	private void HandleXXButtonClick()
	{
		biddingState.Bids.Add(new KeyValuePair<int?, string>(null, "XX"));
		biddingState.IsDoubled = false;
		biddingState.IsRedoubled = true;
		ChangeCurrentPlayer();
	}

	private string GetSuitIcon(string suit)
	{
		return suit switch
		{
			"club" => "♣",
			"diamond" => "♦",
			"heart" => "♥",
			"spade" => "♠",
			"noTrump" => "NT",
			_ => "?"
		};
	}

	private bool CheckIfThreePasses() 
	{
		Console.WriteLine("Hello!");

		int length = biddingState.Bids.Count();

		if (length > 3 && biddingState.Bids[length - 1].Value == "PASS" && 
			biddingState.Bids[length - 2].Value == "PASS" && 
			biddingState.Bids[length - 3].Value == "PASS")
		{
			return true;
		}

		return false;
	}

	private void ChangeCurrentPlayer() 
	{
		switch (biddingState.CurrentPlayer) 
		{
			case Player.W:
				biddingState.CurrentPlayer = Player.N;
				break;
			case Player.N:
				biddingState.CurrentPlayer = Player.E;
				break;
			case Player.E:
				biddingState.CurrentPlayer = Player.S;
				break;
			case Player.S:
				biddingState.CurrentPlayer = Player.W;
				break;
		}
	}

	private bool CanDouble() 
	{
		if (biddingState.IsUndoubledBidPlaced)
		{
			if ((biddingState.CurrentPlayer == Player.W || biddingState.CurrentPlayer == Player.E) && (biddingState.WhoPlacedLastBid == Player.N || biddingState.WhoPlacedLastBid == Player.S))
			{
				return true;
			}

			if ((biddingState.CurrentPlayer == Player.N || biddingState.CurrentPlayer == Player.S) && (biddingState.WhoPlacedLastBid == Player.W || biddingState.WhoPlacedLastBid == Player.E))
			{
				return true;
			}
		}

		return false;
	}

	private bool CanRedouble()
	{
		if (biddingState.IsDoubled)
		{
			if ((biddingState.CurrentPlayer == Player.W || biddingState.CurrentPlayer == Player.E) && (biddingState.WhoPlacedLastBid == Player.W || biddingState.WhoPlacedLastBid == Player.E))
			{
				return true;
			}

			if ((biddingState.CurrentPlayer == Player.N || biddingState.CurrentPlayer == Player.S) && (biddingState.WhoPlacedLastBid == Player.N || biddingState.WhoPlacedLastBid == Player.S))
			{
				return true;
			}
		}

		return false;
	}



	private int GetPlayerWhoStartsAsNumber()
	{
		return biddingState.StartingPlayer switch
		{
			Player.W => 0,
			Player.N => 1,
			Player.E => 2,
			Player.S => 3,
			_ => 0
		};
	}

}
