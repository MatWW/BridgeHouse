@using Microsoft.AspNetCore.SignalR.Client;
@using Shared;
@using Shared.Enums;
@using Frontend.Components;
@using Shared.Enums.Extensions

@implements IAsyncDisposable

@page "/bidding-screen"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@if (biddingState is null)
{
	<p><em>loading...</em></p>
}
else
{
	<div class="bidding">
		<div class="bidding-container">
			<div class="bidding-screen">
				<div class="players">
					<div class="player player1">
						<p>W</p>
					</div>
					<div class="player player2">
						<p>N</p>
					</div>
					<div class="player player3">
						<p>E</p>
					</div>
					<div class="player player4">
						<p>S</p>
					</div>
				</div>
				<div class="bids">
					@{
						int ind = 0;
					}
					@for (ind = 0; ind < GetStartingPlayerPositionAsInt(); ind++)
					{
						<div class="@(ind%2==0 ? "even" : "odd")"></div>
					}
					@foreach (var bidAction in biddingState.BidActions) {
						<div class="bidded @bidAction.Bid.Suit.ToLowercaseString() @bidAction.Bid.Value.ToSymbol() @(ind%2==0 ? "even" : "odd")">
							<p>@bidAction.Bid.Value.ToSymbol() @bidAction.Bid.Suit.ToSymbol()</p>
						</div>

						ind++;
					}
				</div>
			</div>
			@if (signedInPlayer.PlayerId == currentTurnPlayer.PlayerId)
			{
				<div class="bidding-panel">
					<div class="panel-box-1">
						<div class="pass">
							<button @onclick="() => HandleBidButtonClickAsync(BiddingSuit.NONE, BiddingValue.PASS)">Pass</button>
						</div>
						<div class="x-and-xx">
							<button class="@(CanDouble() ? "" : "hidden") double" @onclick="() => HandleBidButtonClickAsync(BiddingSuit.NONE, BiddingValue.DOUBLE)">X</button>
							<button class="@(CanRedouble() ? "" : "hidden") redouble" @onclick="() => HandleBidButtonClickAsync(BiddingSuit.NONE, BiddingValue.REDOUBLE)">XX</button>
						</div>
					</div>
					<div class="panel-box-2">
						<div class="clubs">
							@for (int i = 1; i <= 7; i++)
							{
								int currentNumber = i;
								<BiddingButton VisibilityClass="@(currentNumber < (int)GetLowestBiddingValueInSuit(BiddingSuit.CLUB) ? "hidden" : "")"
								ColorClass="club"
								OnClick="() => HandleBidButtonClickAsync(BiddingSuit.CLUB, (BiddingValue)currentNumber)" Number=currentNumber Icon="♣" />
							}
						</div>
						<div class="diamonds">
							@for (int i = 1; i <= 7; i++)
							{
								int currentNumber = i;
								<BiddingButton VisibilityClass="@(currentNumber < (int)GetLowestBiddingValueInSuit(BiddingSuit.DIAMOND) ? "hidden" : "")"
								ColorClass="diamond"
								OnClick="() => HandleBidButtonClickAsync(BiddingSuit.DIAMOND, (BiddingValue)currentNumber)" Number=currentNumber Icon="♦" />
							}
						</div>
						<div class="hearts">
							@for (int i = 1; i <= 7; i++)
							{
								int currentNumber = i;
								<BiddingButton VisibilityClass="@(currentNumber < (int)GetLowestBiddingValueInSuit(BiddingSuit.HEART) ? "hidden" : "")"
								ColorClass="heart"
								OnClick="() => HandleBidButtonClickAsync(BiddingSuit.HEART, (BiddingValue)currentNumber)" Number=currentNumber Icon="♥" />
							}
						</div>
						<div class="spades">
							@for (int i = 1; i <= 7; i++)
							{
								int currentNumber = i;
								<BiddingButton VisibilityClass="@(currentNumber < (int)GetLowestBiddingValueInSuit(BiddingSuit.SPADE) ? "hidden" : "")"
								ColorClass="spade"
								OnClick="() => HandleBidButtonClickAsync(BiddingSuit.SPADE, (BiddingValue)currentNumber)" Number=currentNumber Icon="♠" />
							}
						</div>
						<div class="no-trumps">
							@for (int i = 1; i <= 7; i++)
							{
								int currentNumber = i;	
								<BiddingButton VisibilityClass="@(currentNumber < (int)GetLowestBiddingValueInSuit(BiddingSuit.NO_TRUMP) ? "hidden" : "")"
								ColorClass="no-trump"
								OnClick="() => HandleBidButtonClickAsync(BiddingSuit.NO_TRUMP, (BiddingValue)currentNumber)" Number=currentNumber Icon="NT" />
							}
						</div>
					</div>
				</div>
			}

			<div class="hand">
				<HandComponent Cards="@playerCards" />
			</div>

		</div>
	</div>
}

@code {
	private BiddingState biddingState = new();
	private Contract? contract;
	private Player signedInPlayer = new();
	private Player currentTurnPlayer = new();
	private List<Card> playerCards = [];
	private HubConnection? hubConnection;


	protected override async Task OnInitializedAsync()
	{
		BiddingState? biddingState = await HttpClient.GetFromJsonAsync<BiddingState>($"api/game/1/biddingState");

		if (biddingState is null)
		{
			throw new Exception("Bidding state cannot be loaded successfully");
		}
		else 
		{
			this.biddingState = biddingState;
		}

		contract = biddingState.Contract;

		Player? signedInPlayer = await HttpClient.GetFromJsonAsync<Player>($"api/game/1/playerInfo/me");

		if (signedInPlayer is null)
		{
			throw new Exception("SignedInPlayer cannot be loaded successfully");
		}
		else
		{
			this.signedInPlayer = signedInPlayer;
		}

		Player? currentTurnPlayer = await HttpClient.GetFromJsonAsync<Player>($"api/game/1/playerInfo/current");

		if (currentTurnPlayer is null)
		{
			throw new Exception("CurrentTurnPlayer cannot be loaded successfully");
		}
		else
		{
			this.currentTurnPlayer = currentTurnPlayer;
		}

		List<Card>? playerCards = await HttpClient.GetFromJsonAsync<List<Card>>($"api/game/1/cards/{signedInPlayer.PlayerId}");

		if (playerCards is null)
		{
			throw new Exception("PlayerCards cannot be loaded successfully");
		}
		else
		{
			this.playerCards = playerCards;
		}

		hubConnection = new HubConnectionBuilder()
			.WithUrl("https://localhost:7200/gameHub")
			.WithAutomaticReconnect()
			.Build();

		hubConnection.On("ReceiveBidUpdate", Update);

		await hubConnection.StartAsync();
	}

	private async Task Update()
	{
		BiddingState? biddingState = await HttpClient.GetFromJsonAsync<BiddingState>($"api/game/1/biddingState");

		if (biddingState is null)
		{
			throw new Exception("Bidding state cannot be loaded successfully");
		}
		else
		{
			this.biddingState = biddingState;
		}

		contract = biddingState.Contract;

		Player? currentTurnPlayer = await HttpClient.GetFromJsonAsync<Player>($"api/game/1/playerInfo/current");

		if (currentTurnPlayer is null)
		{
			throw new Exception("CurrentTurnPlayer cannot be loaded successfully");
		}
		else
		{
			this.currentTurnPlayer = currentTurnPlayer;
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task HandleBidButtonClickAsync(BiddingSuit biddingSuit, BiddingValue biddingValue)
	{
		var bidAction = new BidAction
		{
			Bid = new Bid
			{
				Suit = biddingSuit,
				Value = biddingValue
			},
			Player = signedInPlayer
		};

		await HttpClient.PostAsJsonAsync($"api/game/1/bid", bidAction);

		if (hubConnection is null)
		{
			throw new Exception("HubConnection is null");
		}

		await hubConnection.InvokeAsync("SendBidUpdate");
		await hubConnection.InvokeAsync("SendGamePhaseUpdate");
	}


	private bool CanDouble()
	{
		return contract != null && !contract.IsDoubled && !contract.IsRedoubled && IsCurrentContractBiddedByOpponent(contract);
	}

	private bool CanRedouble()
	{
		return contract != null && contract.IsDoubled && !contract.IsRedoubled && !IsCurrentContractBiddedByOpponent(contract);
	}

	private BiddingValue GetLowestBiddingValueInSuit(BiddingSuit biddingSuit)
	{
		if (contract is null)
		{
			return BiddingValue.ONE;
		}

		var contractBid = contract.BidAction.Bid;

		return contractBid.Suit >= biddingSuit ? contractBid.Value + 1 : contractBid.Value; 
	}

	private int GetStartingPlayerPositionAsInt()
	{
		var bidActions = biddingState.BidActions;

		return bidActions.Count == 0 ? (int)currentTurnPlayer.Position : (int)bidActions[0].Player.Position;
	}

	private bool IsCurrentContractBiddedByOpponent(Contract contract)
	{
		return !AreTeammates(signedInPlayer.Position, contract.BidAction.Player.Position);
	}

	private static bool AreTeammates(Position a, Position b)
	{
		return (a == Position.N && b == Position.S) ||
			(a == Position.S && b == Position.N) ||
			(a == Position.E && b == Position.W) ||
			(a == Position.W && b == Position.E) ||
			(a == b);
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			hubConnection.Remove("ReceiveBidUpdate");

			await hubConnection.StopAsync();
			await hubConnection.DisposeAsync();
		}
	}

}
